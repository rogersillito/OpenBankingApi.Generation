//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.2.5.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using OpenBankingApi.NSwagGenerated.v3_1_1;

namespace OpenBankingApi.NSwagGenerated.v3_1_1
{
    #pragma warning disable

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.5.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class AccountsClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public AccountsClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl; 
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get Accounts</summary>
        /// <param name="x_fapi_financial_id">The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB.</param>
        /// <param name="x_fapi_customer_last_logged_time">The time when the PSU last logged in with the TPP. 
        /// All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: 
        /// Sun, 10 Sep 2017 19:43:31 UTC</param>
        /// <param name="x_fapi_customer_ip_address">The PSU's IP address if the PSU is currently logged in with the TPP.</param>
        /// <param name="x_fapi_interaction_id">An RFC4122 UID used as a correlation id.</param>
        /// <param name="authorization">An Authorisation Token as per https://tools.ietf.org/html/rfc6750</param>
        /// <param name="x_customer_user_agent">Indicates the user-agent that the PSU is using.</param>
        /// <returns>Accounts Read</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OBReadAccount3> AccountsGetAsync(string x_fapi_financial_id, string x_fapi_customer_last_logged_time, string x_fapi_customer_ip_address, string x_fapi_interaction_id, string authorization, string x_customer_user_agent)
        {
            return AccountsGetAsync(x_fapi_financial_id, x_fapi_customer_last_logged_time, x_fapi_customer_ip_address, x_fapi_interaction_id, authorization, x_customer_user_agent, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Accounts</summary>
        /// <param name="x_fapi_financial_id">The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB.</param>
        /// <param name="x_fapi_customer_last_logged_time">The time when the PSU last logged in with the TPP. 
        /// All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: 
        /// Sun, 10 Sep 2017 19:43:31 UTC</param>
        /// <param name="x_fapi_customer_ip_address">The PSU's IP address if the PSU is currently logged in with the TPP.</param>
        /// <param name="x_fapi_interaction_id">An RFC4122 UID used as a correlation id.</param>
        /// <param name="authorization">An Authorisation Token as per https://tools.ietf.org/html/rfc6750</param>
        /// <param name="x_customer_user_agent">Indicates the user-agent that the PSU is using.</param>
        /// <returns>Accounts Read</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OBReadAccount3> AccountsGetAsync(string x_fapi_financial_id, string x_fapi_customer_last_logged_time, string x_fapi_customer_ip_address, string x_fapi_interaction_id, string authorization, string x_customer_user_agent, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_fapi_financial_id == null)
                        throw new System.ArgumentNullException("x_fapi_financial_id");
                    request_.Headers.TryAddWithoutValidation("x-fapi-financial-id", ConvertToString(x_fapi_financial_id, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_customer_last_logged_time != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-customer-last-logged-time", ConvertToString(x_fapi_customer_last_logged_time, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_customer_ip_address != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-customer-ip-address", ConvertToString(x_fapi_customer_ip_address, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_interaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-interaction-id", ConvertToString(x_fapi_interaction_id, System.Globalization.CultureInfo.InvariantCulture));
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_customer_user_agent != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-user-agent", ConvertToString(x_customer_user_agent, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBReadAccount3); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBReadAccount3>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBErrorResponse1); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBErrorResponse1>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<OBErrorResponse1>("Bad request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "405") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Method Not Allowed", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Acceptable", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "429") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Too Many Requests", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBErrorResponse1); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBErrorResponse1>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<OBErrorResponse1>("Internal Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(OBReadAccount3);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Accounts</summary>
        /// <param name="accountId">AccountId</param>
        /// <param name="x_fapi_financial_id">The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB.</param>
        /// <param name="x_fapi_customer_last_logged_time">The time when the PSU last logged in with the TPP. 
        /// All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: 
        /// Sun, 10 Sep 2017 19:43:31 UTC</param>
        /// <param name="x_fapi_customer_ip_address">The PSU's IP address if the PSU is currently logged in with the TPP.</param>
        /// <param name="x_fapi_interaction_id">An RFC4122 UID used as a correlation id.</param>
        /// <param name="authorization">An Authorisation Token as per https://tools.ietf.org/html/rfc6750</param>
        /// <param name="x_customer_user_agent">Indicates the user-agent that the PSU is using.</param>
        /// <returns>Accounts Read</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OBReadAccount3> AccountsGetAsync(string accountId, string x_fapi_financial_id, string x_fapi_customer_last_logged_time, string x_fapi_customer_ip_address, string x_fapi_interaction_id, string authorization, string x_customer_user_agent)
        {
            return AccountsGetAsync(accountId, x_fapi_financial_id, x_fapi_customer_last_logged_time, x_fapi_customer_ip_address, x_fapi_interaction_id, authorization, x_customer_user_agent, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Accounts</summary>
        /// <param name="accountId">AccountId</param>
        /// <param name="x_fapi_financial_id">The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB.</param>
        /// <param name="x_fapi_customer_last_logged_time">The time when the PSU last logged in with the TPP. 
        /// All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: 
        /// Sun, 10 Sep 2017 19:43:31 UTC</param>
        /// <param name="x_fapi_customer_ip_address">The PSU's IP address if the PSU is currently logged in with the TPP.</param>
        /// <param name="x_fapi_interaction_id">An RFC4122 UID used as a correlation id.</param>
        /// <param name="authorization">An Authorisation Token as per https://tools.ietf.org/html/rfc6750</param>
        /// <param name="x_customer_user_agent">Indicates the user-agent that the PSU is using.</param>
        /// <returns>Accounts Read</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OBReadAccount3> AccountsGetAsync(string accountId, string x_fapi_financial_id, string x_fapi_customer_last_logged_time, string x_fapi_customer_ip_address, string x_fapi_interaction_id, string authorization, string x_customer_user_agent, System.Threading.CancellationToken cancellationToken)
        {
            if (accountId == null)
                throw new System.ArgumentNullException("accountId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{AccountId}");
            urlBuilder_.Replace("{AccountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_fapi_financial_id == null)
                        throw new System.ArgumentNullException("x_fapi_financial_id");
                    request_.Headers.TryAddWithoutValidation("x-fapi-financial-id", ConvertToString(x_fapi_financial_id, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_customer_last_logged_time != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-customer-last-logged-time", ConvertToString(x_fapi_customer_last_logged_time, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_customer_ip_address != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-customer-ip-address", ConvertToString(x_fapi_customer_ip_address, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_interaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-interaction-id", ConvertToString(x_fapi_interaction_id, System.Globalization.CultureInfo.InvariantCulture));
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_customer_user_agent != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-user-agent", ConvertToString(x_customer_user_agent, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBReadAccount3); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBReadAccount3>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBErrorResponse1); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBErrorResponse1>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<OBErrorResponse1>("Bad request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "405") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Method Not Allowed", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Acceptable", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "429") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Too Many Requests", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBErrorResponse1); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBErrorResponse1>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<OBErrorResponse1>("Internal Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(OBReadAccount3);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.5.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class BalancesClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public BalancesClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl; 
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get Balances</summary>
        /// <param name="accountId">AccountId</param>
        /// <param name="x_fapi_financial_id">The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB.</param>
        /// <param name="x_fapi_customer_last_logged_time">The time when the PSU last logged in with the TPP. 
        /// All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: 
        /// Sun, 10 Sep 2017 19:43:31 UTC</param>
        /// <param name="x_fapi_customer_ip_address">The PSU's IP address if the PSU is currently logged in with the TPP.</param>
        /// <param name="x_fapi_interaction_id">An RFC4122 UID used as a correlation id.</param>
        /// <param name="authorization">An Authorisation Token as per https://tools.ietf.org/html/rfc6750</param>
        /// <param name="x_customer_user_agent">Indicates the user-agent that the PSU is using.</param>
        /// <returns>Balances Read</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OBReadBalance1> BalancesGetAsync(string accountId, string x_fapi_financial_id, string x_fapi_customer_last_logged_time, string x_fapi_customer_ip_address, string x_fapi_interaction_id, string authorization, string x_customer_user_agent)
        {
            return BalancesGetAsync(accountId, x_fapi_financial_id, x_fapi_customer_last_logged_time, x_fapi_customer_ip_address, x_fapi_interaction_id, authorization, x_customer_user_agent, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Balances</summary>
        /// <param name="accountId">AccountId</param>
        /// <param name="x_fapi_financial_id">The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB.</param>
        /// <param name="x_fapi_customer_last_logged_time">The time when the PSU last logged in with the TPP. 
        /// All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: 
        /// Sun, 10 Sep 2017 19:43:31 UTC</param>
        /// <param name="x_fapi_customer_ip_address">The PSU's IP address if the PSU is currently logged in with the TPP.</param>
        /// <param name="x_fapi_interaction_id">An RFC4122 UID used as a correlation id.</param>
        /// <param name="authorization">An Authorisation Token as per https://tools.ietf.org/html/rfc6750</param>
        /// <param name="x_customer_user_agent">Indicates the user-agent that the PSU is using.</param>
        /// <returns>Balances Read</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OBReadBalance1> BalancesGetAsync(string accountId, string x_fapi_financial_id, string x_fapi_customer_last_logged_time, string x_fapi_customer_ip_address, string x_fapi_interaction_id, string authorization, string x_customer_user_agent, System.Threading.CancellationToken cancellationToken)
        {
            if (accountId == null)
                throw new System.ArgumentNullException("accountId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{AccountId}/balances");
            urlBuilder_.Replace("{AccountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_fapi_financial_id == null)
                        throw new System.ArgumentNullException("x_fapi_financial_id");
                    request_.Headers.TryAddWithoutValidation("x-fapi-financial-id", ConvertToString(x_fapi_financial_id, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_customer_last_logged_time != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-customer-last-logged-time", ConvertToString(x_fapi_customer_last_logged_time, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_customer_ip_address != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-customer-ip-address", ConvertToString(x_fapi_customer_ip_address, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_interaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-interaction-id", ConvertToString(x_fapi_interaction_id, System.Globalization.CultureInfo.InvariantCulture));
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_customer_user_agent != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-user-agent", ConvertToString(x_customer_user_agent, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBReadBalance1); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBReadBalance1>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBErrorResponse1); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBErrorResponse1>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<OBErrorResponse1>("Bad request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "405") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Method Not Allowed", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Acceptable", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "429") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Too Many Requests", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBErrorResponse1); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBErrorResponse1>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<OBErrorResponse1>("Internal Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(OBReadBalance1);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Balances</summary>
        /// <param name="x_fapi_financial_id">The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB.</param>
        /// <param name="x_fapi_customer_last_logged_time">The time when the PSU last logged in with the TPP. 
        /// All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: 
        /// Sun, 10 Sep 2017 19:43:31 UTC</param>
        /// <param name="x_fapi_customer_ip_address">The PSU's IP address if the PSU is currently logged in with the TPP.</param>
        /// <param name="x_fapi_interaction_id">An RFC4122 UID used as a correlation id.</param>
        /// <param name="authorization">An Authorisation Token as per https://tools.ietf.org/html/rfc6750</param>
        /// <param name="x_customer_user_agent">Indicates the user-agent that the PSU is using.</param>
        /// <returns>Balances Read</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OBReadBalance1> BalancesGetAsync(string x_fapi_financial_id, string x_fapi_customer_last_logged_time, string x_fapi_customer_ip_address, string x_fapi_interaction_id, string authorization, string x_customer_user_agent)
        {
            return BalancesGetAsync(x_fapi_financial_id, x_fapi_customer_last_logged_time, x_fapi_customer_ip_address, x_fapi_interaction_id, authorization, x_customer_user_agent, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Balances</summary>
        /// <param name="x_fapi_financial_id">The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB.</param>
        /// <param name="x_fapi_customer_last_logged_time">The time when the PSU last logged in with the TPP. 
        /// All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: 
        /// Sun, 10 Sep 2017 19:43:31 UTC</param>
        /// <param name="x_fapi_customer_ip_address">The PSU's IP address if the PSU is currently logged in with the TPP.</param>
        /// <param name="x_fapi_interaction_id">An RFC4122 UID used as a correlation id.</param>
        /// <param name="authorization">An Authorisation Token as per https://tools.ietf.org/html/rfc6750</param>
        /// <param name="x_customer_user_agent">Indicates the user-agent that the PSU is using.</param>
        /// <returns>Balances Read</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OBReadBalance1> BalancesGetAsync(string x_fapi_financial_id, string x_fapi_customer_last_logged_time, string x_fapi_customer_ip_address, string x_fapi_interaction_id, string authorization, string x_customer_user_agent, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/balances");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_fapi_financial_id == null)
                        throw new System.ArgumentNullException("x_fapi_financial_id");
                    request_.Headers.TryAddWithoutValidation("x-fapi-financial-id", ConvertToString(x_fapi_financial_id, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_customer_last_logged_time != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-customer-last-logged-time", ConvertToString(x_fapi_customer_last_logged_time, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_customer_ip_address != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-customer-ip-address", ConvertToString(x_fapi_customer_ip_address, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_interaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-interaction-id", ConvertToString(x_fapi_interaction_id, System.Globalization.CultureInfo.InvariantCulture));
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_customer_user_agent != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-user-agent", ConvertToString(x_customer_user_agent, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBReadBalance1); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBReadBalance1>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBErrorResponse1); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBErrorResponse1>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<OBErrorResponse1>("Bad request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "405") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Method Not Allowed", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Acceptable", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "429") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Too Many Requests", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBErrorResponse1); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBErrorResponse1>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<OBErrorResponse1>("Internal Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(OBReadBalance1);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.5.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ProductsClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public ProductsClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl; 
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get Products</summary>
        /// <param name="accountId">AccountId</param>
        /// <param name="x_fapi_financial_id">The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB.</param>
        /// <param name="x_fapi_customer_last_logged_time">The time when the PSU last logged in with the TPP. 
        /// All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: 
        /// Sun, 10 Sep 2017 19:43:31 UTC</param>
        /// <param name="x_fapi_customer_ip_address">The PSU's IP address if the PSU is currently logged in with the TPP.</param>
        /// <param name="x_fapi_interaction_id">An RFC4122 UID used as a correlation id.</param>
        /// <param name="authorization">An Authorisation Token as per https://tools.ietf.org/html/rfc6750</param>
        /// <param name="x_customer_user_agent">Indicates the user-agent that the PSU is using.</param>
        /// <returns>Products Read</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OBReadProduct2> ProductAsync(string accountId, string x_fapi_financial_id, string x_fapi_customer_last_logged_time, string x_fapi_customer_ip_address, string x_fapi_interaction_id, string authorization, string x_customer_user_agent)
        {
            return ProductAsync(accountId, x_fapi_financial_id, x_fapi_customer_last_logged_time, x_fapi_customer_ip_address, x_fapi_interaction_id, authorization, x_customer_user_agent, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Products</summary>
        /// <param name="accountId">AccountId</param>
        /// <param name="x_fapi_financial_id">The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB.</param>
        /// <param name="x_fapi_customer_last_logged_time">The time when the PSU last logged in with the TPP. 
        /// All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: 
        /// Sun, 10 Sep 2017 19:43:31 UTC</param>
        /// <param name="x_fapi_customer_ip_address">The PSU's IP address if the PSU is currently logged in with the TPP.</param>
        /// <param name="x_fapi_interaction_id">An RFC4122 UID used as a correlation id.</param>
        /// <param name="authorization">An Authorisation Token as per https://tools.ietf.org/html/rfc6750</param>
        /// <param name="x_customer_user_agent">Indicates the user-agent that the PSU is using.</param>
        /// <returns>Products Read</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OBReadProduct2> ProductAsync(string accountId, string x_fapi_financial_id, string x_fapi_customer_last_logged_time, string x_fapi_customer_ip_address, string x_fapi_interaction_id, string authorization, string x_customer_user_agent, System.Threading.CancellationToken cancellationToken)
        {
            if (accountId == null)
                throw new System.ArgumentNullException("accountId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{AccountId}/product");
            urlBuilder_.Replace("{AccountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_fapi_financial_id == null)
                        throw new System.ArgumentNullException("x_fapi_financial_id");
                    request_.Headers.TryAddWithoutValidation("x-fapi-financial-id", ConvertToString(x_fapi_financial_id, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_customer_last_logged_time != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-customer-last-logged-time", ConvertToString(x_fapi_customer_last_logged_time, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_customer_ip_address != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-customer-ip-address", ConvertToString(x_fapi_customer_ip_address, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_interaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-interaction-id", ConvertToString(x_fapi_interaction_id, System.Globalization.CultureInfo.InvariantCulture));
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_customer_user_agent != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-user-agent", ConvertToString(x_customer_user_agent, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBReadProduct2); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBReadProduct2>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBErrorResponse1); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBErrorResponse1>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<OBErrorResponse1>("Bad request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "405") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Method Not Allowed", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Acceptable", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "429") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Too Many Requests", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBErrorResponse1); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBErrorResponse1>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<OBErrorResponse1>("Internal Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(OBReadProduct2);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Products</summary>
        /// <param name="x_fapi_financial_id">The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB.</param>
        /// <param name="x_fapi_customer_last_logged_time">The time when the PSU last logged in with the TPP. 
        /// All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: 
        /// Sun, 10 Sep 2017 19:43:31 UTC</param>
        /// <param name="x_fapi_customer_ip_address">The PSU's IP address if the PSU is currently logged in with the TPP.</param>
        /// <param name="x_fapi_interaction_id">An RFC4122 UID used as a correlation id.</param>
        /// <param name="authorization">An Authorisation Token as per https://tools.ietf.org/html/rfc6750</param>
        /// <param name="x_customer_user_agent">Indicates the user-agent that the PSU is using.</param>
        /// <returns>Products Read</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OBReadProduct2> ProductsAsync(string x_fapi_financial_id, string x_fapi_customer_last_logged_time, string x_fapi_customer_ip_address, string x_fapi_interaction_id, string authorization, string x_customer_user_agent)
        {
            return ProductsAsync(x_fapi_financial_id, x_fapi_customer_last_logged_time, x_fapi_customer_ip_address, x_fapi_interaction_id, authorization, x_customer_user_agent, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Products</summary>
        /// <param name="x_fapi_financial_id">The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB.</param>
        /// <param name="x_fapi_customer_last_logged_time">The time when the PSU last logged in with the TPP. 
        /// All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: 
        /// Sun, 10 Sep 2017 19:43:31 UTC</param>
        /// <param name="x_fapi_customer_ip_address">The PSU's IP address if the PSU is currently logged in with the TPP.</param>
        /// <param name="x_fapi_interaction_id">An RFC4122 UID used as a correlation id.</param>
        /// <param name="authorization">An Authorisation Token as per https://tools.ietf.org/html/rfc6750</param>
        /// <param name="x_customer_user_agent">Indicates the user-agent that the PSU is using.</param>
        /// <returns>Products Read</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OBReadProduct2> ProductsAsync(string x_fapi_financial_id, string x_fapi_customer_last_logged_time, string x_fapi_customer_ip_address, string x_fapi_interaction_id, string authorization, string x_customer_user_agent, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/products");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_fapi_financial_id == null)
                        throw new System.ArgumentNullException("x_fapi_financial_id");
                    request_.Headers.TryAddWithoutValidation("x-fapi-financial-id", ConvertToString(x_fapi_financial_id, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_customer_last_logged_time != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-customer-last-logged-time", ConvertToString(x_fapi_customer_last_logged_time, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_customer_ip_address != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-customer-ip-address", ConvertToString(x_fapi_customer_ip_address, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_interaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-interaction-id", ConvertToString(x_fapi_interaction_id, System.Globalization.CultureInfo.InvariantCulture));
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_customer_user_agent != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-user-agent", ConvertToString(x_customer_user_agent, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBReadProduct2); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBReadProduct2>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBErrorResponse1); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBErrorResponse1>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<OBErrorResponse1>("Bad request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "405") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Method Not Allowed", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Acceptable", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "429") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Too Many Requests", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBErrorResponse1); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBErrorResponse1>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<OBErrorResponse1>("Internal Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(OBReadProduct2);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.5.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class TransactionsClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public TransactionsClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl; 
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get Transactions</summary>
        /// <param name="accountId">AccountId</param>
        /// <param name="x_fapi_financial_id">The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB.</param>
        /// <param name="x_fapi_customer_last_logged_time">The time when the PSU last logged in with the TPP. 
        /// All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: 
        /// Sun, 10 Sep 2017 19:43:31 UTC</param>
        /// <param name="x_fapi_customer_ip_address">The PSU's IP address if the PSU is currently logged in with the TPP.</param>
        /// <param name="x_fapi_interaction_id">An RFC4122 UID used as a correlation id.</param>
        /// <param name="authorization">An Authorisation Token as per https://tools.ietf.org/html/rfc6750</param>
        /// <param name="fromBookingDateTime">The UTC ISO 8601 Date Time to filter transactions FROM
        /// NB Time component is optional - set to 00:00:00 for just Date.
        /// If the Date Time contains a timezone, the ASPSP must ignore the timezone component.</param>
        /// <param name="toBookingDateTime">The UTC ISO 8601 Date Time to filter transactions TO
        /// NB Time component is optional - set to 00:00:00 for just Date.
        /// If the Date Time contains a timezone, the ASPSP must ignore the timezone component.</param>
        /// <param name="x_customer_user_agent">Indicates the user-agent that the PSU is using.</param>
        /// <returns>Transactions Read</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OBReadTransaction5> TransactionsAsync(string accountId, string x_fapi_financial_id, string x_fapi_customer_last_logged_time, string x_fapi_customer_ip_address, string x_fapi_interaction_id, string authorization, System.DateTimeOffset? fromBookingDateTime, System.DateTimeOffset? toBookingDateTime, string x_customer_user_agent)
        {
            return TransactionsAsync(accountId, x_fapi_financial_id, x_fapi_customer_last_logged_time, x_fapi_customer_ip_address, x_fapi_interaction_id, authorization, fromBookingDateTime, toBookingDateTime, x_customer_user_agent, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Transactions</summary>
        /// <param name="accountId">AccountId</param>
        /// <param name="x_fapi_financial_id">The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB.</param>
        /// <param name="x_fapi_customer_last_logged_time">The time when the PSU last logged in with the TPP. 
        /// All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: 
        /// Sun, 10 Sep 2017 19:43:31 UTC</param>
        /// <param name="x_fapi_customer_ip_address">The PSU's IP address if the PSU is currently logged in with the TPP.</param>
        /// <param name="x_fapi_interaction_id">An RFC4122 UID used as a correlation id.</param>
        /// <param name="authorization">An Authorisation Token as per https://tools.ietf.org/html/rfc6750</param>
        /// <param name="fromBookingDateTime">The UTC ISO 8601 Date Time to filter transactions FROM
        /// NB Time component is optional - set to 00:00:00 for just Date.
        /// If the Date Time contains a timezone, the ASPSP must ignore the timezone component.</param>
        /// <param name="toBookingDateTime">The UTC ISO 8601 Date Time to filter transactions TO
        /// NB Time component is optional - set to 00:00:00 for just Date.
        /// If the Date Time contains a timezone, the ASPSP must ignore the timezone component.</param>
        /// <param name="x_customer_user_agent">Indicates the user-agent that the PSU is using.</param>
        /// <returns>Transactions Read</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OBReadTransaction5> TransactionsAsync(string accountId, string x_fapi_financial_id, string x_fapi_customer_last_logged_time, string x_fapi_customer_ip_address, string x_fapi_interaction_id, string authorization, System.DateTimeOffset? fromBookingDateTime, System.DateTimeOffset? toBookingDateTime, string x_customer_user_agent, System.Threading.CancellationToken cancellationToken)
        {
            if (accountId == null)
                throw new System.ArgumentNullException("accountId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{AccountId}/transactions?");
            urlBuilder_.Replace("{AccountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
            if (fromBookingDateTime != null) 
            {
                urlBuilder_.Append("fromBookingDateTime=").Append(System.Uri.EscapeDataString(fromBookingDateTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toBookingDateTime != null) 
            {
                urlBuilder_.Append("toBookingDateTime=").Append(System.Uri.EscapeDataString(toBookingDateTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_fapi_financial_id == null)
                        throw new System.ArgumentNullException("x_fapi_financial_id");
                    request_.Headers.TryAddWithoutValidation("x-fapi-financial-id", ConvertToString(x_fapi_financial_id, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_customer_last_logged_time != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-customer-last-logged-time", ConvertToString(x_fapi_customer_last_logged_time, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_customer_ip_address != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-customer-ip-address", ConvertToString(x_fapi_customer_ip_address, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_fapi_interaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-fapi-interaction-id", ConvertToString(x_fapi_interaction_id, System.Globalization.CultureInfo.InvariantCulture));
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_customer_user_agent != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-user-agent", ConvertToString(x_customer_user_agent, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBReadTransaction5); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBReadTransaction5>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBErrorResponse1); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBErrorResponse1>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<OBErrorResponse1>("Bad request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "405") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Method Not Allowed", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Acceptable", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "429") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Too Many Requests", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OBErrorResponse1); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OBErrorResponse1>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<OBErrorResponse1>("Internal Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(OBReadTransaction5);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    #pragma warning restore
}