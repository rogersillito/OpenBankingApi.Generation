using FromHeader = Microsoft.AspNetCore.Mvc.FromHeaderAttribute;

{% if GeneratePartialControllers -%}
[System.CodeDom.Compiler.GeneratedCode("NSwag", "{{ ToolchainVersion }}")]
public interface I{{ Class }}Controller
{
{%     for operation in Operations -%}
{%         if operation.HasSummary -%}
    /// <summary>{{ operation.Summary | csharpdocs }}</summary>
{%         endif -%}
{%         for parameter in operation.Parameters -%}
{%             if parameter.HasDescription -%}
    /// <param name="{{ parameter.VariableName }}">{{ parameter.Description | csharpdocs }}</param>
{%             endif -%}
{%         endfor -%}
{%         if operation.HasResultDescription -%}
    /// <returns>{{ operation.ResultDescription | csharpdocs }}</returns>
{%         endif -%}
{%         if operation.IsDeprecated -%}
    [System.Obsolete]
{%         endif -%}
    {{ operation.ResultType }} {{ operation.ActualOperationName }}Async({% for parameter in operation.Parameters %}{{ parameter.TypeInControllerInterface }} {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional and parameter.HasDefault == false %} = null{% endif %}{% if parameter.IsLast == false or UseCancellationToken %}, {% endif %}{% endfor %}{% if UseCancellationToken %}System.Threading.CancellationToken cancellationToken{% endif %});

{%      endfor -%}
}

{% endif -%}
[System.CodeDom.Compiler.GeneratedCode("NSwag", "{{ ToolchainVersion }}")]
{% if HasBasePath -%}
[{{ AspNetNamespace }}.RoutePrefix("{{ BasePath }}")]
{% endif -%}
{% if GeneratePartialControllers -%}
public partial class {{ Class }}Controller : {% if HasBaseClass %}{{ BaseClass }}{% else %}{{ AspNetNamespace }}.ApiController{% endif %}
{
    private I{{ Class }}Controller _implementation;

    public {{ Class }}Controller(I{{ Class }}Controller implementation)
    {
        _implementation = implementation;
    }

{%     for operation in Operations -%}
{%         if operation.HasSummary -%}
    /// <summary>{{ operation.Summary | csharpdocs }}</summary>
{%         endif -%}
{%         for parameter in operation.Parameters -%}
{%             if parameter.HasDescription -%}
    /// <param name="{{ parameter.VariableName }}">{{ parameter.Description | csharpdocs }}</param>
{%             endif -%}
{%         endfor -%}
{%         if operation.HasResultDescription -%}
    /// <returns>{{ operation.ResultDescription | csharpdocs }}</returns>
{%         endif -%}
{%         if operation.IsDeprecated -%}
    [System.Obsolete]
{%         endif -%}
    [{{ AspNetNamespace }}.Http{{ operation.HttpMethodUpper }}, {{ AspNetNamespace }}.Route("{{ operation.Path }}"{% if operation.HasRouteName %}, Name = "{{ operation.RouteName }}"{% endif %})]
    public {% if operation.WrapResponse %}async System.Threading.Tasks.Task<HttpResponseMessage>{% else %}{{ operation.ResultType }}{% endif %} {{ operation.ActualOperationName }}({% for parameter in operation.Parameters %}/* {{ parameter.Kind.ToString() }} */{% if parameter.IsHeader %}[FromHeader{% if parameter.IsValidIdentifier == false %}(Name = "{{ parameter.Name }}"){% endif %}] {% endif %}{% if parameter.IsBody %}[{{ AspNetNamespace }}.FromBody] {% endif %}{{ parameter.Type }} {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %} = null{% endif %}{% if parameter.IsLast == false or UseCancellationToken %}, {% endif %}{% endfor %}{% if UseCancellationToken %}System.Threading.CancellationToken cancellationToken{% endif %})
    {
{%         if operation.WrapResponse -%}
        var result = await _implementation.{{ operation.ActualOperationName }}Async({% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if parameter.IsLast == false or UseCancellationToken %}, {% endif %}{% endfor %}{% if UseCancellationToken %}cancellationToken{% endif %}).ConfigureAwait(false);

        var status = (System.Net.HttpStatusCode)result.StatusCode;
        HttpResponseMessage response = Request.CreateResponse(status{% if operation.UnwrappedResultType != "void" %}, result.Result{% endif %});

        foreach (var header in result.Headers)
            response.Headers.Add(header.Key, header.Value);

        return response;
{%         else -%}
        return _implementation.{{ operation.ActualOperationName }}Async({% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if parameter.HasDefault %} ?? {{parameter.Default}}{% endif %}{% if parameter.IsLast == false or UseCancellationToken %}, {% endif %}{% endfor %}{% if UseCancellationToken %}cancellationToken{% endif %});
{%         endif -%}
    }

{%     endfor -%}
}
{% elseif GenerateAbstractControllers -%}
public abstract class {{ Class }}ControllerBase : {% if HasBaseClass %}{{ BaseClass }}{% else %}{{ AspNetNamespace }}.ApiController{% endif %}
{
{%     for operation in Operations -%}
{%         if operation.HasSummary -%}
    /// <summary>{{ operation.Summary | csharpdocs }}</summary>
{%         endif -%}
{%         for parameter in operation.Parameters -%}
{%             if parameter.HasDescription -%}
    /// <param name="{{ parameter.VariableName }}">{{ parameter.Description | csharpdocs }}</param>
{%             endif -%}
{%         endfor -%}
{%         if operation.HasResultDescription -%}
    /// <returns>{{ operation.ResultDescription | csharpdocs }}</returns>
{%         endif -%}
{%         if operation.IsDeprecated -%}
    [System.Obsolete]
{%         endif -%}
    [{{ AspNetNamespace }}.Http{{ operation.HttpMethodUpper }}, {{ AspNetNamespace }}.Route("{{ operation.Path }}"{% if operation.HasRouteName %}, Name = "{{ operation.RouteName }}"{% endif %})]
    public abstract {%  if operation.WrapResponse %}System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>{% else %}{{ operation.ResultType }}{% endif %} {{ operation.ActualOperationName }}({% for parameter in operation.Parameters %}{% if parameter.IsHeader %}[FromHeader{% if parameter.IsValidIdentifier == false %}(Name = "{{ parameter.Name }}"){% endif %}] {% endif %}{% if parameter.IsBody %}[{{ AspNetNamespace }}.FromBody] {% endif %}{{ parameter.Type }} {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %} = null{% endif %}{% if parameter.IsLast == false or UseCancellationToken %}, {% endif %}{% endfor %}{% if UseCancellationToken %}System.Threading.CancellationToken cancellationToken{% endif %});

{%     endfor -%}
}
{% endif -%}

// Web API only!
/* 
public class FromHeaderBinding : {{ AspNetNamespace }}.Controllers.HttpParameterBinding
{
    private readonly string _name;

    public FromHeaderBinding({{ AspNetNamespace }}.Controllers.HttpParameterDescriptor parameter, string headerName)
        : base(parameter)
    {
        if (string.IsNullOrEmpty(headerName)) throw new System.ArgumentNullException("headerName");
        _name = headerName;
    }

    public override System.Threading.Tasks.Task ExecuteBindingAsync({{ AspNetNamespace }}.Metadata.ModelMetadataProvider metadataProvider, {{ AspNetNamespace }}.Controllers.HttpActionContext actionContext, System.Threading.CancellationToken cancellationToken)
    {
        System.Collections.Generic.IEnumerable<string> values;
        var isBound = false;
        if (actionContext.Request.Headers.TryGetValues(_name, out values))
        {
            string tempVal = null;
            foreach (var value in values)
            {
                if (value != null)
                {
                    tempVal = value;
                    break;
                }
            }
            if (tempVal != null)
            {
                var actionValue = System.Convert.ChangeType(tempVal, Descriptor.ParameterType);
                actionContext.ActionArguments[Descriptor.ParameterName] = actionValue;
                isBound = true;
            }
        }
        if (!isBound && Descriptor.IsOptional)
        {
            actionContext.ActionArguments[Descriptor.ParameterName] = Descriptor.DefaultValue;
        }
        var taskSource = new System.Threading.Tasks.TaskCompletionSource<object>();
        taskSource.SetResult(null);
        return taskSource.Task;
    }
}

public class FromHeaderAttribute : {{ AspNetNamespace }}.ParameterBindingAttribute
{
    public string Name { get; set; }

    public override {{ AspNetNamespace }}.Controllers.HttpParameterBinding GetBinding({{ AspNetNamespace }}.Controllers.HttpParameterDescriptor parameter)
    {
        return new FromHeaderBinding(parameter, Name ?? parameter.ParameterName);
    }
}
*/